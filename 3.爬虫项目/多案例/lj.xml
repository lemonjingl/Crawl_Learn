<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.39">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name=".null"/>
    <GlyphID id="2" name="nonmarkingreturn"/>
    <GlyphID id="3" name="five"/>
    <GlyphID id="4" name="nine"/>
    <GlyphID id="5" name="eight"/>
    <GlyphID id="6" name="zero"/>
    <GlyphID id="7" name="two"/>
    <GlyphID id="8" name="four"/>
    <GlyphID id="9" name="three"/>
    <GlyphID id="10" name="one"/>
    <GlyphID id="11" name="seven"/>
    <GlyphID id="12" name="six"/>
    <GlyphID id="13" name="uni4E09"/>
    <GlyphID id="14" name="uni4E8C"/>
    <GlyphID id="15" name="uni4E00"/>
    <GlyphID id="16" name="uni4E94"/>
    <GlyphID id="17" name="uni516D"/>
    <GlyphID id="18" name="uni5F0F"/>
    <GlyphID id="19" name="uni5885"/>
    <GlyphID id="20" name="uni590D"/>
    <GlyphID id="21" name="uni5BA4"/>
    <GlyphID id="22" name="uni5C42"/>
    <GlyphID id="23" name="uni4E03"/>
    <GlyphID id="24" name="uni5C45"/>
    <GlyphID id="25" name="uni522B"/>
    <GlyphID id="26" name="uni8DC3"/>
    <GlyphID id="27" name="uni56DB"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="1.0"/>
    <checkSumAdjustment value="0x397e7157"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000000 00011111"/>
    <unitsPerEm value="1000"/>
    <created value="Tue Jul 23 03:17:23 2019"/>
    <modified value="Sun Sep 24 12:43:55 2023"/>
    <xMin value="8"/>
    <yMin value="-86"/>
    <xMax value="987"/>
    <yMax value="892"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="8"/>
    <fontDirectionHint value="2"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="850"/>
    <descent value="-150"/>
    <lineGap value="0"/>
    <advanceWidthMax value="1000"/>
    <minLeftSideBearing value="0"/>
    <minRightSideBearing value="0"/>
    <xMaxExtent value="987"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="14"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="28"/>
    <maxPoints value="96"/>
    <maxContours value="7"/>
    <maxCompositePoints value="0"/>
    <maxCompositeContours value="0"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="72"/>
    <maxStorage value="88"/>
    <maxFunctionDefs value="115"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="247"/>
    <maxSizeOfInstructions value="736"/>
    <maxComponentElements value="0"/>
    <maxComponentDepth value="0"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="1"/>
    <xAvgCharWidth value="834"/>
    <usWeightClass value="400"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00000000"/>
    <ySubscriptXSize value="634"/>
    <ySubscriptYSize value="700"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="140"/>
    <ySuperscriptXSize value="634"/>
    <ySuperscriptYSize value="700"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="480"/>
    <yStrikeoutSize value="49"/>
    <yStrikeoutPosition value="258"/>
    <sFamilyClass value="0"/>
    <panose>
      <bFamilyType value="2"/>
      <bSerifStyle value="0"/>
      <bWeight value="5"/>
      <bProportion value="3"/>
      <bContrast value="0"/>
      <bStrokeVariation value="0"/>
      <bArmStyle value="0"/>
      <bLetterForm value="0"/>
      <bMidline value="0"/>
      <bXHeight value="0"/>
    </panose>
    <ulUnicodeRange1 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange2 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="PfEd"/>
    <fsSelection value="00000000 01000000"/>
    <usFirstCharIndex value="48"/>
    <usLastCharIndex value="55201"/>
    <sTypoAscender value="850"/>
    <sTypoDescender value="-150"/>
    <sTypoLineGap value="90"/>
    <usWinAscent value="892"/>
    <usWinDescent value="150"/>
    <ulCodePageRange1 value="00000000 00000000 00000000 00000001"/>
    <ulCodePageRange2 value="00000000 00000000 00000000 00000000"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="1000" lsb="0"/>
    <mtx name=".null" width="0" lsb="0"/>
    <mtx name="eight" width="586" lsb="52"/>
    <mtx name="five" width="586" lsb="86"/>
    <mtx name="four" width="586" lsb="9"/>
    <mtx name="nine" width="586" lsb="48"/>
    <mtx name="nonmarkingreturn" width="333" lsb="0"/>
    <mtx name="one" width="586" lsb="88"/>
    <mtx name="seven" width="586" lsb="46"/>
    <mtx name="six" width="586" lsb="57"/>
    <mtx name="three" width="586" lsb="70"/>
    <mtx name="two" width="586" lsb="52"/>
    <mtx name="uni4E00" width="1000" lsb="16"/>
    <mtx name="uni4E03" width="1000" lsb="25"/>
    <mtx name="uni4E09" width="1000" lsb="29"/>
    <mtx name="uni4E8C" width="1000" lsb="29"/>
    <mtx name="uni4E94" width="1000" lsb="20"/>
    <mtx name="uni516D" width="1000" lsb="26"/>
    <mtx name="uni522B" width="1000" lsb="14"/>
    <mtx name="uni56DB" width="1000" lsb="91"/>
    <mtx name="uni5885" width="1000" lsb="22"/>
    <mtx name="uni590D" width="1000" lsb="13"/>
    <mtx name="uni5BA4" width="1000" lsb="21"/>
    <mtx name="uni5C42" width="1000" lsb="8"/>
    <mtx name="uni5C45" width="1000" lsb="12"/>
    <mtx name="uni5F0F" width="1000" lsb="15"/>
    <mtx name="uni8DC3" width="1000" lsb="13"/>
    <mtx name="zero" width="586" lsb="44"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="0" platEncID="3" language="0">
      <map code="0x30" name="five"/><!-- DIGIT ZERO -->
      <map code="0x31" name="nine"/><!-- DIGIT ONE -->
      <map code="0x32" name="eight"/><!-- DIGIT TWO -->
      <map code="0x33" name="zero"/><!-- DIGIT THREE -->
      <map code="0x34" name="two"/><!-- DIGIT FOUR -->
      <map code="0x35" name="four"/><!-- DIGIT FIVE -->
      <map code="0x36" name="three"/><!-- DIGIT SIX -->
      <map code="0x37" name="one"/><!-- DIGIT SEVEN -->
      <map code="0x38" name="seven"/><!-- DIGIT EIGHT -->
      <map code="0x39" name="six"/><!-- DIGIT NINE -->
      <map code="0xd1aa" name="uni4E09"/><!-- HANGUL SYLLABLE TOLM -->
      <map code="0xd2aa" name="uni4E8C"/><!-- HANGUL SYLLABLE TYULP -->
      <map code="0xd32e" name="uni4E00"/><!-- HANGUL SYLLABLE PAENH -->
      <map code="0xd3aa" name="uni4E94"/><!-- HANGUL SYLLABLE PEBS -->
      <map code="0xd4aa" name="uni516D"/><!-- HANGUL SYLLABLE PWEOJ -->
      <map code="0xd4fd" name="uni5F0F"/><!-- HANGUL SYLLABLE PYUNG -->
      <map code="0xd533" name="uni5885"/><!-- HANGUL SYLLABLE PYIS -->
      <map code="0xd5a2" name="uni590D"/><!-- HANGUL SYLLABLE HYABS -->
      <map code="0xd5a4" name="uni5BA4"/><!-- HANGUL SYLLABLE HYASS -->
      <map code="0xd5a9" name="uni5C42"/><!-- HANGUL SYLLABLE HYAT -->
      <map code="0xd5aa" name="uni4E03"/><!-- HANGUL SYLLABLE HYAP -->
      <map code="0xd5ba" name="uni5C45"/><!-- HANGUL SYLLABLE HYAELP -->
      <map code="0xd6aa" name="uni522B"/><!-- HANGUL SYLLABLE HYOGG -->
      <map code="0xd6fd" name="uni8DC3"/><!-- HANGUL SYLLABLE HWEG -->
      <map code="0xd7a1" name="uni56DB"/><!-- HANGUL SYLLABLE HIT -->
    </cmap_format_4>
    <cmap_format_0 platformID="1" platEncID="0" language="0">
      <map code="0x0" name=".null"/>
      <map code="0x8" name=".null"/>
      <map code="0x9" name="nonmarkingreturn"/>
      <map code="0xd" name="nonmarkingreturn"/>
      <map code="0x1d" name=".null"/>
      <map code="0x30" name="five"/>
      <map code="0x31" name="nine"/>
      <map code="0x32" name="eight"/>
      <map code="0x33" name="zero"/>
      <map code="0x34" name="two"/>
      <map code="0x35" name="four"/>
      <map code="0x36" name="three"/>
      <map code="0x37" name="one"/>
      <map code="0x38" name="seven"/>
      <map code="0x39" name="six"/>
    </cmap_format_0>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0x30" name="five"/><!-- DIGIT ZERO -->
      <map code="0x31" name="nine"/><!-- DIGIT ONE -->
      <map code="0x32" name="eight"/><!-- DIGIT TWO -->
      <map code="0x33" name="zero"/><!-- DIGIT THREE -->
      <map code="0x34" name="two"/><!-- DIGIT FOUR -->
      <map code="0x35" name="four"/><!-- DIGIT FIVE -->
      <map code="0x36" name="three"/><!-- DIGIT SIX -->
      <map code="0x37" name="one"/><!-- DIGIT SEVEN -->
      <map code="0x38" name="seven"/><!-- DIGIT EIGHT -->
      <map code="0x39" name="six"/><!-- DIGIT NINE -->
      <map code="0xd1aa" name="uni4E09"/><!-- HANGUL SYLLABLE TOLM -->
      <map code="0xd2aa" name="uni4E8C"/><!-- HANGUL SYLLABLE TYULP -->
      <map code="0xd32e" name="uni4E00"/><!-- HANGUL SYLLABLE PAENH -->
      <map code="0xd3aa" name="uni4E94"/><!-- HANGUL SYLLABLE PEBS -->
      <map code="0xd4aa" name="uni516D"/><!-- HANGUL SYLLABLE PWEOJ -->
      <map code="0xd4fd" name="uni5F0F"/><!-- HANGUL SYLLABLE PYUNG -->
      <map code="0xd533" name="uni5885"/><!-- HANGUL SYLLABLE PYIS -->
      <map code="0xd5a2" name="uni590D"/><!-- HANGUL SYLLABLE HYABS -->
      <map code="0xd5a4" name="uni5BA4"/><!-- HANGUL SYLLABLE HYASS -->
      <map code="0xd5a9" name="uni5C42"/><!-- HANGUL SYLLABLE HYAT -->
      <map code="0xd5aa" name="uni4E03"/><!-- HANGUL SYLLABLE HYAP -->
      <map code="0xd5ba" name="uni5C45"/><!-- HANGUL SYLLABLE HYAELP -->
      <map code="0xd6aa" name="uni522B"/><!-- HANGUL SYLLABLE HYOGG -->
      <map code="0xd6fd" name="uni8DC3"/><!-- HANGUL SYLLABLE HWEG -->
      <map code="0xd7a1" name="uni56DB"/><!-- HANGUL SYLLABLE HIT -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      PUSHB[ ]	/* 1 value pushed */
      0
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHW[ ]	/* 1 value pushed */
        14
        LTEQ[ ]	/* LessThenOrEqual */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        6
        GTEQ[ ]	/* GreaterThanOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          52
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          40
        EIF[ ]	/* EndIf */
        ADD[ ]	/* Add */
        FLOOR[ ]	/* Floor */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          PUSHW[ ]	/* 2 values pushed */
          2048 2048
          MUL[ ]	/* Multiply */
          MUL[ ]	/* Multiply */
          SWAP[ ]	/* SwapTopStack */
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 3 values pushed */
        0 1 0
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      1
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        FLOOR[ ]	/* Floor */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      2
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        192
        LT[ ]	/* LessThan */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        AND[ ]	/* LogicalAnd */
        PUSHB[ ]	/* 3 values pushed */
        40 1 10
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        MUL[ ]	/* Multiply */
        RCVT[ ]	/* ReadCVT */
        GT[ ]	/* GreaterThan */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          IF[ ]	/* If */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            80
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              POP[ ]	/* PopTopStack */
              PUSHB[ ]	/* 1 value pushed */
              64
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            56
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              POP[ ]	/* PopTopStack */
              PUSHB[ ]	/* 1 value pushed */
              56
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 2 values pushed */
          1 10
          RS[ ]	/* ReadStore */
          RCVT[ ]	/* ReadCVT */
          MUL[ ]	/* Multiply */
          RCVT[ ]	/* ReadCVT */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          40
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 2 values pushed */
            1 10
            RS[ ]	/* ReadStore */
            RCVT[ ]	/* ReadCVT */
            MUL[ ]	/* Multiply */
            RCVT[ ]	/* ReadCVT */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            48
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              POP[ ]	/* PopTopStack */
              PUSHB[ ]	/* 1 value pushed */
              48
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            192
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              DUP[ ]	/* DuplicateTopStack */
              FLOOR[ ]	/* Floor */
              DUP[ ]	/* DuplicateTopStack */
              ROLL[ ]	/* RollTopThreeStack */
              ROLL[ ]	/* RollTopThreeStack */
              SUB[ ]	/* Subtract */
              DUP[ ]	/* DuplicateTopStack */
              PUSHB[ ]	/* 1 value pushed */
              10
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                ADD[ ]	/* Add */
              ELSE[ ]	/* Else */
                DUP[ ]	/* DuplicateTopStack */
                PUSHB[ ]	/* 1 value pushed */
                32
                LT[ ]	/* LessThan */
                IF[ ]	/* If */
                  POP[ ]	/* PopTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  10
                  ADD[ ]	/* Add */
                ELSE[ ]	/* Else */
                  DUP[ ]	/* DuplicateTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  54
                  LT[ ]	/* LessThan */
                  IF[ ]	/* If */
                    POP[ ]	/* PopTopStack */
                    PUSHB[ ]	/* 1 value pushed */
                    54
                    ADD[ ]	/* Add */
                  ELSE[ ]	/* Else */
                    ADD[ ]	/* Add */
                  EIF[ ]	/* EndIf */
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 1 value pushed */
              1
              CALL[ ]	/* CallFunction */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NEG[ ]	/* Negate */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      3
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        RS[ ]	/* ReadStore */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          6
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      4
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 2 values pushed */
        5 98
        WS[ ]	/* WriteStore */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        1 10
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 2 values pushed */
        1 10
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        RCVT[ ]	/* ReadCVT */
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 2 values pushed */
        48 5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          ADD[ ]	/* Add */
          LT[ ]	/* LessThan */
        ELSE[ ]	/* Else */
          SUB[ ]	/* Subtract */
          GT[ ]	/* GreaterThan */
        EIF[ ]	/* EndIf */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      5
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 3 values pushed */
        0 2 0
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      6
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        7
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        2
        DIV[ ]	/* Divide */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        5
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      7
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      8
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        7 11 0
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 3 values pushed */
        0 1 0
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      9
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 3 values pushed */
        0 1 0
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      10
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        32
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          48
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            32
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            64
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        WCVTP[ ]	/* WriteCVTInPixels */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      11
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        36
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          0
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          64
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        WCVTP[ ]	/* WriteCVTInPixels */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      12
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 3 values pushed */
        11 10 3
        RCVT[ ]	/* ReadCVT */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      13
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 2
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        100
        SUB[ ]	/* Subtract */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      14
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        RS[ ]	/* ReadStore */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        13
        RS[ ]	/* ReadStore */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        0
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          13
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      15
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        16
        DIV[ ]	/* Divide */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        1024
        MUL[ ]	/* Multiply */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        14
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        14
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        SWAP[ ]	/* SwapTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      16
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          4 100
          WCVTP[ ]	/* WriteCVTInPixels */
        EIF[ ]	/* EndIf */
        DEPTH[ ]	/* GetDepthStack */
        PUSHB[ ]	/* 1 value pushed */
        13
        NEG[ ]	/* Negate */
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      17
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 2 values pushed */
            4 100
            WCVTP[ ]	/* WriteCVTInPixels */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        DEPTH[ ]	/* GetDepthStack */
        PUSHB[ ]	/* 1 value pushed */
        19
        NEG[ ]	/* Negate */
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      18
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 15
        RS[ ]	/* ReadStore */
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          15 15
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          15
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        12 2
        CINDEX[ ]	/* CopyXToTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        13 2
        CINDEX[ ]	/* CopyXToTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZPS[ ]	/* SetZonePointerS */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          1 0
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          WS[ ]	/* WriteStore */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          14
          LOOPCALL[ ]	/* LoopAndCallFunction */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          14
          LOOPCALL[ ]	/* LoopAndCallFunction */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 0
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          14
          LOOPCALL[ ]	/* LoopAndCallFunction */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        12
        RS[ ]	/* ReadStore */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        13
        RS[ ]	/* ReadStore */
        GC[1]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        2
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 2 values pushed */
        0 0
        SZP0[ ]	/* SetZonePointer0 */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        MIAP[0]	/* MoveIndirectAbsPt */
        PUSHB[ ]	/* 3 values pushed */
        1 1 1
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      19
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RCVT[ ]	/* ReadCVT */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          15
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          11
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          10
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          WS[ ]	/* WriteStore */
          DUP[ ]	/* DuplicateTopStack */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 6 values pushed */
          16 16 1 0 14 0
          WS[ ]	/* WriteStore */
          WS[ ]	/* WriteStore */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 2 values pushed */
          18 6
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          114
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          CLEAR[ ]	/* ClearStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      20
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      21
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      22
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      23
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        3 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      24
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        4 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      25
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        5 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      26
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        6 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      27
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        7 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      28
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        8 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      29
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        9 19
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      30
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        13
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RCVT[ ]	/* ReadCVT */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          15
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          11
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          10
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          WS[ ]	/* WriteStore */
          DUP[ ]	/* DuplicateTopStack */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 6 values pushed */
          16 16 1 0 14 0
          WS[ ]	/* WriteStore */
          WS[ ]	/* WriteStore */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 2 values pushed */
          18 6
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          114
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          CLEAR[ ]	/* ClearStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      31
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      32
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      33
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      34
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        3 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      35
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        4 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      36
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        5 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      37
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        6 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      38
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        7 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      39
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        8 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      40
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        9 30
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      41
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      42
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        16
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        41
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      43
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        42
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        42
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      44
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        SHPIX[ ]	/* ShiftZoneByPixel */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          GC[1]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          11
          RS[ ]	/* ReadStore */
          MUL[ ]	/* Multiply */
          PUSHW[ ]	/* 1 value pushed */
          1024
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      45
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RCVT[ ]	/* ReadCVT */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          1
          SZPS[ ]	/* SetZonePointerS */
          PUSHB[ ]	/* 1 value pushed */
          44
          LOOPCALL[ ]	/* LoopAndCallFunction */
          PUSHB[ ]	/* 1 value pushed */
          1
          SZP2[ ]	/* SetZonePointer2 */
          IUP[0]	/* InterpolateUntPts */
        ELSE[ ]	/* Else */
          CLEAR[ ]	/* ClearStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      46
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        13
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RCVT[ ]	/* ReadCVT */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          1
          SZPS[ ]	/* SetZonePointerS */
          PUSHB[ ]	/* 1 value pushed */
          44
          LOOPCALL[ ]	/* LoopAndCallFunction */
          PUSHB[ ]	/* 1 value pushed */
          1
          SZP2[ ]	/* SetZonePointer2 */
          IUP[0]	/* InterpolateUntPts */
        ELSE[ ]	/* Else */
          CLEAR[ ]	/* ClearStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      47
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        SHC[1]	/* ShiftContourByLastPt */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      48
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        1
        RCVT[ ]	/* ReadCVT */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 5 values pushed */
        0 0 0 0 0
        WCVTP[ ]	/* WriteCVTInPixels */
        MIAP[0]	/* MoveIndirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 2 values pushed */
        47 1
        SZP2[ ]	/* SetZonePointer2 */
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      49
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      50
      FDEF[ ]	/* FunctionDefinition */
        MDAP[0]	/* MoveDirectAbsPt */
        SLOOP[ ]	/* SetLoopVariable */
        ALIGNRP[ ]	/* AlignRelativePt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      51
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      52
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 0
        SZPS[ ]	/* SetZonePointerS */
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        IF[ ]	/* If */
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 3 values pushed */
        51 1 1
        SZP2[ ]	/* SetZonePointer2 */
        SZP1[ ]	/* SetZonePointer1 */
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      53
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        NEG[ ]	/* Negate */
        ROLL[ ]	/* RollTopThreeStack */
        MDAP[0]	/* MoveDirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        ROLL[ ]	/* RollTopThreeStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      54
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        96
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 4 values pushed */
            2 32 3 32
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 4 values pushed */
            2 38 3 26
          EIF[ ]	/* EndIf */
          WS[ ]	/* WriteStore */
          WS[ ]	/* WriteStore */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          RS[ ]	/* ReadStore */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          4
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          RS[ ]	/* ReadStore */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            2
            RS[ ]	/* ReadStore */
            SUB[ ]	/* Subtract */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            3
            RS[ ]	/* ReadStore */
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          SUB[ ]	/* Subtract */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          RS[ ]	/* ReadStore */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          RS[ ]	/* ReadStore */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          ADD[ ]	/* Add */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          ADD[ ]	/* Add */
          ABS[ ]	/* Absolute */
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      55
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        SWAP[ ]	/* SwapTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      56
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      57
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          MDAP[0]	/* MoveDirectAbsPt */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          PUSHW[ ]	/* 2 values pushed */
          2048 2048
          MUL[ ]	/* Multiply */
          MUL[ ]	/* Multiply */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          IF[ ]	/* If */
            DIV[ ]	/* Divide */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
          MUL[ ]	/* Multiply */
          PUSHW[ ]	/* 1 value pushed */
          1024
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          SWAP[ ]	/* SwapTopStack */
          MDAP[0]	/* MoveDirectAbsPt */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
          ROLL[ ]	/* RollTopThreeStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      58
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        RS[ ]	/* ReadStore */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        2
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        ROLL[ ]	/* RollTopThreeStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      59
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      60
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      61
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      62
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        53
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      63
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        54
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        4
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        ROLL[ ]	/* RollTopThreeStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        RS[ ]	/* ReadStore */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        43
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      64
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      65
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        8 4
        CINDEX[ ]	/* CopyXToTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        96
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 4 values pushed */
            2 32 3 32
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 4 values pushed */
            2 38 3 26
          EIF[ ]	/* EndIf */
          WS[ ]	/* WriteStore */
          WS[ ]	/* WriteStore */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[1]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          4
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          RS[ ]	/* ReadStore */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            2
            RS[ ]	/* ReadStore */
            SUB[ ]	/* Subtract */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            3
            RS[ ]	/* ReadStore */
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
          SWAP[ ]	/* SwapTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      66
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        53
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      67
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        54
        CALL[ ]	/* CallFunction */
        POP[ ]	/* PopTopStack */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        4
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        SWAP[ ]	/* SwapTopStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        RS[ ]	/* ReadStore */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        43
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      68
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 3 values pushed */
        0 1 1
        SZP2[ ]	/* SetZonePointer2 */
        SZP1[ ]	/* SetZonePointer1 */
        SZP0[ ]	/* SetZonePointer0 */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        49
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      69
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 3 values pushed */
        0 1 1
        SZP2[ ]	/* SetZonePointer2 */
        SZP1[ ]	/* SetZonePointer1 */
        SZP0[ ]	/* SetZonePointer0 */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        49
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      70
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 1
        SZP1[ ]	/* SetZonePointer1 */
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        50
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      71
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        52
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      72
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      73
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        8
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        72
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      74
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      75
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      76
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      77
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      78
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      79
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      80
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      81
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      82
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 62
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      83
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 62
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      84
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 62
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      85
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 62
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      86
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      87
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      88
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      89
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      90
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      91
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      92
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      93
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      94
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 63
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      95
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 63
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      96
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 63
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      97
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 63
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      98
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        55
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      99
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        55
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        59
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      100
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        55
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        60
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      101
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        55
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        61
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      102
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        56
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      103
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        56
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        59
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      104
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        56
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        60
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      105
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        56
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        61
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      106
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        57
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      107
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        57
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        59
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      108
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        57
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        60
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      109
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        57
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        61
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      110
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        58
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        43 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      111
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        58
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        59
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      112
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        58
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        60
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      113
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        58
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        61
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      114
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        9 4 2 3
        RCVT[ ]	/* ReadCVT */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        WS[ ]	/* WriteStore */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        8
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        3
        DEPTH[ ]	/* GetDepthStack */
        LT[ ]	/* LessThan */
        JROT[ ]	/* JumpRelativeOnTrue */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        IUP[0]	/* InterpolateUntPts */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      200
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      1
      PUSHW[ ]	/* 2 values pushed */
      2048 2048
      MUL[ ]	/* Multiply */
      WCVTF[ ]	/* WriteCVTInFUnits */
      PUSHB[ ]	/* 2 values pushed */
      0 5
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 3 values pushed */
      0 1 0
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 5
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 4 values pushed */
      10 2 1 8
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 5
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 4 values pushed */
      14 0 1 8
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 6
      WS[ ]	/* WriteStore */
      PUSHW[ ]	/* 3 values pushed */
      704 1 9
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 7
      WS[ ]	/* WriteStore */
      PUSHW[ ]	/* 3 values pushed */
      64 1 9
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      3 0
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 2 values pushed */
      36 1
      GETINFO[ ]	/* GetInfo */
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        64
        GETINFO[ ]	/* GetInfo */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          3 100
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 2 values pushed */
          38 1
          GETINFO[ ]	/* GetInfo */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHW[ ]	/* 3 values pushed */
            2176 1 1088
            GETINFO[ ]	/* GetInfo */
            MUL[ ]	/* Multiply */
            EQ[ ]	/* Equal */
            IF[ ]	/* If */
              PUSHB[ ]	/* 2 values pushed */
              3 0
              WCVTP[ ]	/* WriteCVTInPixels */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 4 values pushed */
      12 2 1 12
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHW[ ]	/* 1 value pushed */
      511
      SCANCTRL[ ]	/* ScanConversionControl */
      PUSHB[ ]	/* 1 value pushed */
      4
      SCANTYPE[ ]	/* ScanType */
      PUSHB[ ]	/* 2 values pushed */
      2 0
      WCVTP[ ]	/* WriteCVTInPixels */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="0"/>
    <cv index="1" value="0"/>
    <cv index="2" value="0"/>
    <cv index="3" value="0"/>
    <cv index="4" value="0"/>
    <cv index="5" value="0"/>
    <cv index="6" value="0"/>
    <cv index="7" value="0"/>
    <cv index="8" value="93"/>
    <cv index="9" value="93"/>
    <cv index="10" value="82"/>
    <cv index="11" value="82"/>
    <cv index="12" value="892"/>
    <cv index="13" value="-150"/>
    <cv index="14" value="892"/>
    <cv index="15" value="-150"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef"/><!-- contains no outline data -->

    <TTGlyph name=".null"/><!-- contains no outline data -->

    <TTGlyph name="eight" xMin="52" yMin="37" xMax="536" yMax="820">
      <contour>
        <pt x="214" y="448" on="1"/>
        <pt x="79" y="511" on="0"/>
        <pt x="79" y="631" on="1"/>
        <pt x="79" y="714" on="0"/>
        <pt x="205" y="820" on="0"/>
        <pt x="304" y="819" on="1"/>
        <pt x="395" y="819" on="0"/>
        <pt x="511" y="721" on="0"/>
        <pt x="512" y="643" on="1"/>
        <pt x="512" y="517" on="0"/>
        <pt x="371" y="449" on="1"/>
        <pt x="371" y="447" on="1"/>
        <pt x="536" y="387" on="0"/>
        <pt x="536" y="244" on="1"/>
        <pt x="536" y="149" on="0"/>
        <pt x="400" y="37" on="0"/>
        <pt x="278" y="38" on="1"/>
        <pt x="178" y="38" on="0"/>
        <pt x="52" y="148" on="0"/>
        <pt x="52" y="236" on="1"/>
        <pt x="52" y="380" on="0"/>
        <pt x="214" y="446" on="1"/>
      </contour>
      <contour>
        <pt x="415" y="631" on="1"/>
        <pt x="415" y="682" on="0"/>
        <pt x="351" y="740" on="0"/>
        <pt x="297" y="741" on="1"/>
        <pt x="247" y="741" on="0"/>
        <pt x="175" y="679" on="0"/>
        <pt x="175" y="632" on="1"/>
        <pt x="175" y="538" on="0"/>
        <pt x="294" y="488" on="1"/>
        <pt x="415" y="539" on="0"/>
      </contour>
      <contour>
        <pt x="288" y="403" on="1"/>
        <pt x="148" y="346" on="0"/>
        <pt x="148" y="241" on="1"/>
        <pt x="148" y="186" on="0"/>
        <pt x="230" y="116" on="0"/>
        <pt x="360" y="116" on="0"/>
        <pt x="440" y="186" on="0"/>
        <pt x="440" y="238" on="1"/>
        <pt x="440" y="348" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 38 values pushed */
          30 10 2 3 2 1 71 0 0 0 2 3 0 2 96 0 3 1 1 3 84 0 3 3 1
          88 0 1 3 1 76 26 39 41 36 4 5 24
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="five" xMin="86" yMin="37" xMax="516" yMax="807">
      <contour>
        <pt x="86" y="166" on="1"/>
        <pt x="163" y="117" on="0"/>
        <pt x="245" y="117" on="1"/>
        <pt x="323" y="117" on="0"/>
        <pt x="419" y="203" on="0"/>
        <pt x="419" y="349" on="0"/>
        <pt x="321" y="429" on="0"/>
        <pt x="230" y="429" on="1"/>
        <pt x="185" y="429" on="0"/>
        <pt x="110" y="422" on="1"/>
        <pt x="110" y="807" on="1"/>
        <pt x="482" y="807" on="1"/>
        <pt x="482" y="722" on="1"/>
        <pt x="199" y="722" on="1"/>
        <pt x="199" y="508" on="1"/>
        <pt x="241" y="511" on="0"/>
        <pt x="263" y="511" on="1"/>
        <pt x="382" y="511" on="0"/>
        <pt x="516" y="389" on="0"/>
        <pt x="516" y="283" on="1"/>
        <pt x="516" y="173" on="0"/>
        <pt x="372" y="37" on="0"/>
        <pt x="246" y="38" on="1"/>
        <pt x="140" y="38" on="0"/>
        <pt x="86" y="69" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 56 values pushed */
          14 1 1 4 9 0 2 0 1 24 1 5 0 3 71 0 2 0 3 4 2 3 94 0 4
          0 1 0 4 1 96 0 0 5 5 0 84 0 0 0 5 88 0 5 0 5 76 36 34 17
          18 35 33 6 5 26
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="four" xMin="9" yMin="50" xMax="551" yMax="807">
      <contour>
        <pt x="551" y="247" on="1"/>
        <pt x="454" y="247" on="1"/>
        <pt x="454" y="50" on="1"/>
        <pt x="361" y="50" on="1"/>
        <pt x="361" y="247" on="1"/>
        <pt x="9" y="247" on="1"/>
        <pt x="9" y="309" on="1"/>
        <pt x="343" y="807" on="1"/>
        <pt x="454" y="807" on="1"/>
        <pt x="454" y="322" on="1"/>
        <pt x="551" y="322" on="1"/>
      </contour>
      <contour>
        <pt x="361" y="322" on="1"/>
        <pt x="361" y="639" on="1"/>
        <pt x="361" y="673" on="0"/>
        <pt x="363" y="717" on="1"/>
        <pt x="361" y="717" on="1"/>
        <pt x="355" y="698" on="0"/>
        <pt x="333" y="659" on="1"/>
        <pt x="107" y="322" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 55 values pushed */
          14 1 4 3 6 1 0 4 2 71 0 3 4 3 111 0 1 0 1 112 6 5 2 4 0
          0 4 82 6 5 2 4 4 0 87 2 1 0 4 0 75 11 11 11 18 11 18 17 18 17
          17 16 7 5 25
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="nine" xMin="48" yMin="37" xMax="535" yMax="820">
      <contour>
        <pt x="90" y="153" on="1"/>
        <pt x="153" y="117" on="0"/>
        <pt x="225" y="117" on="1"/>
        <pt x="327" y="117" on="0"/>
        <pt x="439" y="277" on="0"/>
        <pt x="439" y="424" on="1"/>
        <pt x="438" y="423" on="0"/>
        <pt x="437" y="424" on="1"/>
        <pt x="387" y="330" on="0"/>
        <pt x="269" y="330" on="1"/>
        <pt x="174" y="330" on="0"/>
        <pt x="48" y="460" on="0"/>
        <pt x="49" y="565" on="1"/>
        <pt x="49" y="676" on="0"/>
        <pt x="185" y="820" on="0"/>
        <pt x="294" y="819" on="1"/>
        <pt x="407" y="819" on="0"/>
        <pt x="535" y="643" on="0"/>
        <pt x="534" y="473" on="1"/>
        <pt x="534" y="263" on="0"/>
        <pt x="370" y="37" on="0"/>
        <pt x="225" y="38" on="1"/>
        <pt x="146" y="38" on="0"/>
        <pt x="90" y="63" on="1"/>
      </contour>
      <contour>
        <pt x="146" y="577" on="1"/>
        <pt x="146" y="501" on="0"/>
        <pt x="224" y="411" on="0"/>
        <pt x="293" y="412" on="1"/>
        <pt x="352" y="412" on="0"/>
        <pt x="434" y="492" on="0"/>
        <pt x="433" y="551" on="1"/>
        <pt x="433" y="633" on="0"/>
        <pt x="353" y="739" on="0"/>
        <pt x="287" y="740" on="1"/>
        <pt x="226" y="740" on="0"/>
        <pt x="146" y="646" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 55 values pushed */
          5 1 4 5 0 1 0 1 23 1 3 0 3 71 0 2 0 5 4 2 5 96 0 4 0
          1 0 4 1 96 0 0 3 3 0 84 0 0 0 3 88 0 3 0 3 76 36 36 36 36
          37 33 6 5 26
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="nonmarkingreturn"/><!-- contains no outline data -->

    <TTGlyph name="one" xMin="88" yMin="50" xMax="526" yMax="823">
      <contour>
        <pt x="526" y="50" on="1"/>
        <pt x="92" y="50" on="1"/>
        <pt x="92" y="133" on="1"/>
        <pt x="262" y="133" on="1"/>
        <pt x="262" y="707" on="1"/>
        <pt x="88" y="657" on="1"/>
        <pt x="88" y="745" on="1"/>
        <pt x="357" y="823" on="1"/>
        <pt x="357" y="133" on="1"/>
        <pt x="526" y="133" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 31 values pushed */
          7 6 5 4 4 1 69 2 1 1 0 0 1 82 2 1 1 1 0 86 0 0 1 0 74
          21 17 16 3 5 23
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="seven" xMin="46" yMin="50" xMax="538" yMax="807">
      <contour>
        <pt x="538" y="773" on="1"/>
        <pt x="242" y="50" on="1"/>
        <pt x="143" y="50" on="1"/>
        <pt x="424" y="722" on="1"/>
        <pt x="46" y="722" on="1"/>
        <pt x="46" y="807" on="1"/>
        <pt x="538" y="807" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 33 values pushed */
          0 1 1 2 1 71 0 0 1 0 112 0 2 1 1 2 82 0 2 2 1 86 0 1 2
          1 74 17 17 17 3 5 23
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="six" xMin="57" yMin="38" xMax="545" yMax="819">
      <contour>
        <pt x="497" y="709" on="1"/>
        <pt x="438" y="740" on="0"/>
        <pt x="374" y="740" on="1"/>
        <pt x="275" y="740" on="0"/>
        <pt x="157" y="568" on="0"/>
        <pt x="155" y="421" on="1"/>
        <pt x="158" y="421" on="1"/>
        <pt x="211" y="525" on="0"/>
        <pt x="329" y="525" on="1"/>
        <pt x="427" y="525" on="0"/>
        <pt x="545" y="397" on="0"/>
        <pt x="544" y="291" on="1"/>
        <pt x="544" y="180" on="0"/>
        <pt x="410" y="38" on="0"/>
        <pt x="304" y="38" on="1"/>
        <pt x="189" y="38" on="0"/>
        <pt x="57" y="218" on="0"/>
        <pt x="58" y="383" on="1"/>
        <pt x="58" y="583" on="0"/>
        <pt x="230" y="819" on="0"/>
        <pt x="371" y="819" on="1"/>
        <pt x="451" y="819" on="0"/>
        <pt x="497" y="797" on="1"/>
      </contour>
      <contour>
        <pt x="161" y="298" on="1"/>
        <pt x="161" y="223" on="0"/>
        <pt x="241" y="117" on="0"/>
        <pt x="307" y="117" on="1"/>
        <pt x="369" y="117" on="0"/>
        <pt x="447" y="209" on="0"/>
        <pt x="447" y="281" on="1"/>
        <pt x="447" y="359" on="0"/>
        <pt x="373" y="445" on="0"/>
        <pt x="306" y="446" on="1"/>
        <pt x="241" y="446" on="0"/>
        <pt x="161" y="358" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 55 values pushed */
          22 1 0 3 0 1 1 0 5 1 4 5 3 71 0 3 0 0 1 3 0 96 0 1 0
          5 4 1 5 96 0 4 2 2 4 84 0 4 4 2 88 0 2 4 2 76 36 36 36 36
          36 33 6 5 26
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="three" xMin="70" yMin="37" xMax="513" yMax="819">
      <contour>
        <pt x="70" y="177" on="1"/>
        <pt x="148" y="117" on="0"/>
        <pt x="245" y="117" on="1"/>
        <pt x="323" y="117" on="0"/>
        <pt x="415" y="193" on="0"/>
        <pt x="415" y="258" on="1"/>
        <pt x="415" y="401" on="0"/>
        <pt x="209" y="401" on="1"/>
        <pt x="146" y="401" on="1"/>
        <pt x="146" y="480" on="1"/>
        <pt x="206" y="480" on="1"/>
        <pt x="388" y="480" on="0"/>
        <pt x="388" y="615" on="1"/>
        <pt x="388" y="740" on="0"/>
        <pt x="249" y="740" on="1"/>
        <pt x="169" y="740" on="0"/>
        <pt x="99" y="686" on="1"/>
        <pt x="99" y="776" on="1"/>
        <pt x="173" y="819" on="0"/>
        <pt x="273" y="819" on="1"/>
        <pt x="369" y="819" on="0"/>
        <pt x="487" y="719" on="0"/>
        <pt x="486" y="638" on="1"/>
        <pt x="486" y="489" on="0"/>
        <pt x="335" y="447" on="1"/>
        <pt x="335" y="445" on="1"/>
        <pt x="417" y="436" on="0"/>
        <pt x="513" y="338" on="0"/>
        <pt x="512" y="265" on="1"/>
        <pt x="512" y="163" on="0"/>
        <pt x="366" y="37" on="0"/>
        <pt x="243" y="38" on="1"/>
        <pt x="136" y="38" on="0"/>
        <pt x="70" y="78" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 63 values pushed */
          17 1 3 4 16 1 2 3 24 1 1 2 0 1 0 1 33 1 5 0 5 71 0 4 0
          3 2 4 3 96 0 2 0 1 0 2 1 96 0 0 5 5 0 84 0 0 0 5 88 0
          5 0 5 76 42 35 34 33 35 33 6 5 26
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="two" xMin="52" yMin="50" xMax="520" yMax="819">
      <contour>
        <pt x="512" y="50" on="1"/>
        <pt x="52" y="50" on="1"/>
        <pt x="52" y="133" on="1"/>
        <pt x="272" y="352" on="1"/>
        <pt x="362" y="443" on="0"/>
        <pt x="424" y="549" on="0"/>
        <pt x="424" y="606" on="1"/>
        <pt x="424" y="670" on="0"/>
        <pt x="352" y="740" on="0"/>
        <pt x="283" y="739" on="1"/>
        <pt x="182" y="739" on="0"/>
        <pt x="90" y="653" on="1"/>
        <pt x="90" y="750" on="1"/>
        <pt x="180" y="819" on="0"/>
        <pt x="298" y="819" on="1"/>
        <pt x="400" y="819" on="0"/>
        <pt x="520" y="709" on="0"/>
        <pt x="519" y="616" on="1"/>
        <pt x="519" y="545" on="0"/>
        <pt x="443" y="411" on="0"/>
        <pt x="337" y="306" on="1"/>
        <pt x="165" y="137" on="1"/>
        <pt x="165" y="135" on="1"/>
        <pt x="512" y="135" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 45 values pushed */
          12 1 1 2 11 1 3 1 2 1 0 3 3 71 0 2 0 1 3 2 1 96 0 3 0
          0 3 82 0 3 3 0 86 0 0 3 0 74 38 35 39 16 4 5 24
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni4E00" xMin="16" yMin="387" xMax="986" yMax="473">
      <contour>
        <pt x="16" y="473" on="1"/>
        <pt x="986" y="473" on="1"/>
        <pt x="986" y="387" on="1"/>
        <pt x="16" y="387" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 21 values pushed */
          0 0 1 1 0 82 0 0 0 1 86 0 1 0 1 74 17 16 2 5 22
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni4E03" xMin="25" yMin="-50" xMax="973" yMax="874">
      <contour>
        <pt x="25" y="505" on="1"/>
        <pt x="361" y="541" on="1"/>
        <pt x="361" y="874" on="1"/>
        <pt x="449" y="874" on="1"/>
        <pt x="449" y="551" on="1"/>
        <pt x="966" y="608" on="1"/>
        <pt x="973" y="529" on="1"/>
        <pt x="449" y="470" on="1"/>
        <pt x="449" y="122" on="1"/>
        <pt x="449" y="32" on="0"/>
        <pt x="548" y="32" on="1"/>
        <pt x="740" y="32" on="1"/>
        <pt x="845" y="32" on="0"/>
        <pt x="856" y="94" on="1"/>
        <pt x="868" y="162" on="0"/>
        <pt x="877" y="248" on="1"/>
        <pt x="914" y="231" on="0"/>
        <pt x="962" y="215" on="1"/>
        <pt x="946" y="113" on="0"/>
        <pt x="931" y="52" on="1"/>
        <pt x="904" y="-50" on="0"/>
        <pt x="769" y="-50" on="1"/>
        <pt x="526" y="-50" on="1"/>
        <pt x="361" y="-50" on="0"/>
        <pt x="361" y="102" on="1"/>
        <pt x="361" y="460" on="1"/>
        <pt x="33" y="424" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 13 values pushed */
          26 25 17 15 7 5 4 1 8 1 0 1 71
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          28
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 13 values pushed */
            0 1 0 2 1 2 92 0 0 0 12 0 73
          ELSE[ ]	/* Else */
            NPUSHB[ ]	/* 21 values pushed */
            0 0 1 0 111 0 1 2 2 1 84 0 1 1 2 88 0 2 1 2 76
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 6 values pushed */
          56 54 18 3 5 23
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni4E09" xMin="29" yMin="-6" xMax="973" yMax="783">
      <contour>
        <pt x="90" y="783" on="1"/>
        <pt x="908" y="783" on="1"/>
        <pt x="908" y="699" on="1"/>
        <pt x="90" y="699" on="1"/>
      </contour>
      <contour>
        <pt x="29" y="76" on="1"/>
        <pt x="973" y="76" on="1"/>
        <pt x="973" y="-6" on="1"/>
        <pt x="29" y="-6" on="1"/>
      </contour>
      <contour>
        <pt x="134" y="448" on="1"/>
        <pt x="864" y="448" on="1"/>
        <pt x="864" y="365" on="1"/>
        <pt x="134" y="365" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 41 values pushed */
          0 0 0 1 4 0 1 94 0 4 0 5 2 4 5 94 0 2 3 3 2 82 0 2 2
          3 86 0 3 2 3 74 17 17 17 17 17 16 6 5 26
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni4E8C" xMin="29" yMin="34" xMax="968" yMax="756">
      <contour>
        <pt x="102" y="756" on="1"/>
        <pt x="898" y="756" on="1"/>
        <pt x="898" y="672" on="1"/>
        <pt x="102" y="672" on="1"/>
      </contour>
      <contour>
        <pt x="29" y="116" on="1"/>
        <pt x="968" y="116" on="1"/>
        <pt x="968" y="34" on="1"/>
        <pt x="29" y="34" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 31 values pushed */
          0 0 0 1 2 0 1 94 0 2 3 3 2 82 0 2 2 3 86 0 3 2 3 74 17
          17 17 16 4 5 24
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni4E94" xMin="20" yMin="-28" xMax="985" yMax="813">
      <contour>
        <pt x="20" y="45" on="1"/>
        <pt x="247" y="45" on="1"/>
        <pt x="304" y="428" on="1"/>
        <pt x="81" y="428" on="1"/>
        <pt x="81" y="502" on="1"/>
        <pt x="315" y="502" on="1"/>
        <pt x="351" y="739" on="1"/>
        <pt x="55" y="739" on="1"/>
        <pt x="55" y="813" on="1"/>
        <pt x="940" y="813" on="1"/>
        <pt x="940" y="739" on="1"/>
        <pt x="433" y="739" on="1"/>
        <pt x="398" y="502" on="1"/>
        <pt x="827" y="502" on="1"/>
        <pt x="827" y="45" on="1"/>
        <pt x="985" y="45" on="1"/>
        <pt x="985" y="-28" on="1"/>
        <pt x="20" y="-28" on="1"/>
      </contour>
      <contour>
        <pt x="745" y="428" on="1"/>
        <pt x="387" y="428" on="1"/>
        <pt x="329" y="45" on="1"/>
        <pt x="745" y="45" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 55 values pushed */
          0 4 5 1 3 2 4 3 94 6 1 2 9 1 1 0 2 1 94 10 7 2 0 8 8
          0 82 10 7 2 0 0 8 86 0 8 0 8 74 21 20 19 18 17 17 17 17 17 17 17
          17 16 11 5 29
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni516D" xMin="26" yMin="-60" xMax="978" yMax="875">
      <contour>
        <pt x="29" y="629" on="1"/>
        <pt x="978" y="629" on="1"/>
        <pt x="978" y="551" on="1"/>
        <pt x="29" y="551" on="1"/>
      </contour>
      <contour>
        <pt x="400" y="835" on="1"/>
        <pt x="472" y="875" on="1"/>
        <pt x="519" y="809" on="0"/>
        <pt x="585" y="698" on="1"/>
        <pt x="505" y="655" on="1"/>
        <pt x="441" y="776" on="0"/>
      </contour>
      <contour>
        <pt x="322" y="435" on="1"/>
        <pt x="406" y="392" on="1"/>
        <pt x="273" y="153" on="0"/>
        <pt x="100" y="-60" on="1"/>
        <pt x="68" y="-32" on="0"/>
        <pt x="26" y="2" on="1"/>
        <pt x="195" y="184" on="0"/>
      </contour>
      <contour>
        <pt x="587" y="379" on="1"/>
        <pt x="654" y="429" on="1"/>
        <pt x="815" y="228" on="0"/>
        <pt x="965" y="12" on="1"/>
        <pt x="883" y="-49" on="1"/>
        <pt x="715" y="216" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 36 values pushed */
          8 7 5 3 0 69 21 20 18 15 13 11 6 1 68 0 0 1 1 0 82 0 0 0 1
          86 0 1 0 1 74 17 16 2 5 22
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni522B" xMin="14" yMin="-84" xMax="929" yMax="875">
      <contour>
        <pt x="84" y="825" on="1"/>
        <pt x="527" y="825" on="1"/>
        <pt x="527" y="483" on="1"/>
        <pt x="451" y="483" on="1"/>
        <pt x="451" y="523" on="1"/>
        <pt x="160" y="523" on="1"/>
        <pt x="160" y="483" on="1"/>
        <pt x="84" y="483" on="1"/>
      </contour>
      <contour>
        <pt x="47" y="381" on="1"/>
        <pt x="206" y="381" on="1"/>
        <pt x="208" y="430" on="0"/>
        <pt x="209" y="491" on="1"/>
        <pt x="285" y="491" on="1"/>
        <pt x="284" y="430" on="0"/>
        <pt x="281" y="381" on="1"/>
        <pt x="536" y="381" on="1"/>
        <pt x="533" y="211" on="0"/>
        <pt x="525" y="102" on="1"/>
        <pt x="519" y="-57" on="0"/>
        <pt x="380" y="-56" on="1"/>
        <pt x="314" y="-56" on="0"/>
        <pt x="244" y="-50" on="1"/>
        <pt x="239" y="-4" on="0"/>
        <pt x="230" y="31" on="1"/>
        <pt x="307" y="19" on="0"/>
        <pt x="367" y="19" on="1"/>
        <pt x="445" y="18" on="0"/>
        <pt x="449" y="109" on="1"/>
        <pt x="457" y="189" on="0"/>
        <pt x="459" y="310" on="1"/>
        <pt x="276" y="310" on="1"/>
        <pt x="264" y="59" on="0"/>
        <pt x="67" y="-84" on="1"/>
        <pt x="47" y="-54" on="0"/>
        <pt x="14" y="-19" on="1"/>
        <pt x="193" y="107" on="0"/>
        <pt x="201" y="310" on="1"/>
        <pt x="47" y="310" on="1"/>
      </contour>
      <contour>
        <pt x="848" y="875" on="1"/>
        <pt x="929" y="875" on="1"/>
        <pt x="929" y="59" on="1"/>
        <pt x="929" y="-67" on="0"/>
        <pt x="807" y="-67" on="1"/>
        <pt x="743" y="-67" on="0"/>
        <pt x="652" y="-66" on="1"/>
        <pt x="647" y="-26" on="0"/>
        <pt x="638" y="22" on="1"/>
        <pt x="738" y="15" on="0"/>
        <pt x="780" y="15" on="1"/>
        <pt x="848" y="15" on="0"/>
        <pt x="848" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="647" y="776" on="1"/>
        <pt x="726" y="776" on="1"/>
        <pt x="726" y="154" on="1"/>
        <pt x="647" y="154" on="1"/>
      </contour>
      <contour>
        <pt x="451" y="755" on="1"/>
        <pt x="160" y="755" on="1"/>
        <pt x="160" y="594" on="1"/>
        <pt x="451" y="594" on="1"/>
      </contour>
      <instructions>
        <assembly>
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          24
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 16 values pushed */
            27 23 17 3 8 15 34 1 7 8 2 71 32 1 7 68
          ELSE[ ]	/* Else */
            NPUSHB[ ]	/* 16 values pushed */
            27 23 17 3 8 15 34 1 7 8 2 71 32 1 12 68
          EIF[ ]	/* EndIf */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          12
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 64 values pushed */
            0 5 2 1 4 5 101 3 1 1 4 2 1 4 107 0 0 0 16 17 0 16 94 0 17
            0 2 5 17 2 94 6 1 4 10 1 9 15 4 9 95 0 14 0 15 8 14 15 94 13
            1 8 12 1 7 8 7 92 0 11 11 12 11 73
          ELSE[ ]	/* Else */
            MPPEM[ ]	/* MeasurePixelPerEm */
            PUSHB[ ]	/* 1 value pushed */
            24
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              NPUSHB[ ]	/* 65 values pushed */
              0 5 2 1 2 5 1 109 3 1 1 4 2 1 4 107 0 0 0 16 17 0 16 94 0
              17 0 2 5 17 2 94 6 1 4 10 1 9 15 4 9 95 0 14 0 15 8 14 15 94
              13 1 8 12 1 7 8 7 92 0 11 11 12 11 73
            ELSE[ ]	/* Else */
              MPPEM[ ]	/* MeasurePixelPerEm */
              PUSHB[ ]	/* 1 value pushed */
              29
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                NPUSHB[ ]	/* 70 values pushed */
                0 5 2 1 2 5 1 109 3 1 1 4 2 1 4 107 0 0 0 16 17 0 16 94 0
                17 0 2 5 17 2 94 6 1 4 10 1 9 15 4 9 95 0 14 0 15 8 14 15 94
                0 7 12 8 7 84 13 1 8 0 12 8 12 92 0 11 11 12 11 73
              ELSE[ ]	/* Else */
                NPUSHB[ ]	/* 75 values pushed */
                0 11 0 11 111 0 5 2 1 2 5 1 109 3 1 1 4 2 1 4 107 0 0 0 16
                17 0 16 94 0 17 0 2 5 17 2 94 6 1 4 10 1 9 15 4 9 95 0 14 0
                15 8 14 15 94 13 1 8 0 7 12 8 7 96 13 1 8 8 12 88 0 12 8 12 76
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 30 values pushed */
          58 57 56 55 54 53 52 51 49 46 44 41 39 38 37 36 30 29 36 35 18 18 17 17 17
          17 16 18 5 29
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni56DB" xMin="91" yMin="-75" xMax="932" yMax="810">
      <contour>
        <pt x="91" y="810" on="1"/>
        <pt x="932" y="810" on="1"/>
        <pt x="932" y="-75" on="1"/>
        <pt x="850" y="-75" on="1"/>
        <pt x="850" y="-17" on="1"/>
        <pt x="173" y="-17" on="1"/>
        <pt x="173" y="-75" on="1"/>
        <pt x="91" y="-75" on="1"/>
      </contour>
      <contour>
        <pt x="723" y="323" on="1"/>
        <pt x="769" y="323" on="0"/>
        <pt x="837" y="325" on="1"/>
        <pt x="822" y="245" on="1"/>
        <pt x="710" y="245" on="1"/>
        <pt x="580" y="245" on="0"/>
        <pt x="580" y="363" on="1"/>
        <pt x="580" y="731" on="1"/>
        <pt x="440" y="731" on="1"/>
        <pt x="439" y="456" on="0"/>
        <pt x="408" y="369" on="1"/>
        <pt x="376" y="260" on="0"/>
        <pt x="236" y="170" on="1"/>
        <pt x="211" y="200" on="0"/>
        <pt x="176" y="232" on="1"/>
        <pt x="308" y="311" on="0"/>
        <pt x="333" y="403" on="1"/>
        <pt x="359" y="467" on="0"/>
        <pt x="360" y="731" on="1"/>
        <pt x="173" y="731" on="1"/>
        <pt x="173" y="60" on="1"/>
        <pt x="850" y="60" on="1"/>
        <pt x="850" y="731" on="1"/>
        <pt x="660" y="731" on="1"/>
        <pt x="660" y="374" on="1"/>
        <pt x="660" y="323" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 71 values pushed */
          22 20 2 8 5 1 71 3 1 1 2 1 112 0 0 9 7 2 6 4 0 6 94 10 1
          4 0 5 8 4 5 96 0 8 2 2 8 82 0 8 8 2 86 0 2 8 2 74 10 8
          31 30 29 28 27 26 16 15 13 11 8 33 10 33 17 17 17 16 11 5 24
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni5885" xMin="22" yMin="-32" xMax="978" yMax="827">
      <contour>
        <pt x="30" y="313" on="1"/>
        <pt x="135" y="319" on="0"/>
        <pt x="248" y="327" on="1"/>
        <pt x="248" y="402" on="1"/>
        <pt x="55" y="402" on="1"/>
        <pt x="55" y="455" on="1"/>
        <pt x="248" y="455" on="1"/>
        <pt x="248" y="531" on="1"/>
        <pt x="135" y="531" on="1"/>
        <pt x="135" y="506" on="1"/>
        <pt x="68" y="506" on="1"/>
        <pt x="68" y="827" on="1"/>
        <pt x="496" y="827" on="1"/>
        <pt x="496" y="506" on="1"/>
        <pt x="430" y="506" on="1"/>
        <pt x="430" y="531" on="1"/>
        <pt x="316" y="531" on="1"/>
        <pt x="316" y="455" on="1"/>
        <pt x="513" y="455" on="1"/>
        <pt x="513" y="402" on="1"/>
        <pt x="316" y="402" on="1"/>
        <pt x="316" y="331" on="1"/>
        <pt x="529" y="347" on="1"/>
        <pt x="526" y="327" on="0"/>
        <pt x="524" y="287" on="1"/>
        <pt x="260" y="268" on="0"/>
        <pt x="38" y="253" on="1"/>
      </contour>
      <contour>
        <pt x="22" y="30" on="1"/>
        <pt x="464" y="30" on="1"/>
        <pt x="464" y="118" on="1"/>
        <pt x="96" y="118" on="1"/>
        <pt x="96" y="181" on="1"/>
        <pt x="464" y="181" on="1"/>
        <pt x="464" y="239" on="1"/>
        <pt x="536" y="239" on="1"/>
        <pt x="536" y="181" on="1"/>
        <pt x="903" y="181" on="1"/>
        <pt x="903" y="118" on="1"/>
        <pt x="536" y="118" on="1"/>
        <pt x="536" y="30" on="1"/>
        <pt x="978" y="30" on="1"/>
        <pt x="978" y="-32" on="1"/>
        <pt x="22" y="-32" on="1"/>
      </contour>
      <contour>
        <pt x="528" y="530" on="1"/>
        <pt x="528" y="590" on="1"/>
        <pt x="724" y="590" on="1"/>
        <pt x="658" y="643" on="0"/>
        <pt x="585" y="695" on="1"/>
        <pt x="631" y="737" on="1"/>
        <pt x="683" y="702" on="0"/>
        <pt x="728" y="668" on="1"/>
        <pt x="853" y="768" on="1"/>
        <pt x="547" y="768" on="1"/>
        <pt x="547" y="826" on="1"/>
        <pt x="948" y="826" on="1"/>
        <pt x="948" y="769" on="1"/>
        <pt x="779" y="629" on="1"/>
        <pt x="811" y="604" on="1"/>
        <pt x="792" y="590" on="1"/>
        <pt x="973" y="590" on="1"/>
        <pt x="973" y="536" on="1"/>
        <pt x="937" y="461" on="0"/>
        <pt x="910" y="413" on="1"/>
        <pt x="879" y="425" on="0"/>
        <pt x="841" y="430" on="1"/>
        <pt x="874" y="482" on="0"/>
        <pt x="898" y="530" on="1"/>
        <pt x="775" y="530" on="1"/>
        <pt x="775" y="329" on="1"/>
        <pt x="775" y="241" on="0"/>
        <pt x="671" y="241" on="1"/>
        <pt x="621" y="241" on="0"/>
        <pt x="569" y="243" on="1"/>
        <pt x="565" y="280" on="0"/>
        <pt x="558" y="310" on="1"/>
        <pt x="609" y="306" on="0"/>
        <pt x="661" y="306" on="1"/>
        <pt x="705" y="306" on="0"/>
        <pt x="705" y="349" on="1"/>
        <pt x="705" y="530" on="1"/>
      </contour>
      <contour>
        <pt x="430" y="776" on="1"/>
        <pt x="316" y="776" on="1"/>
        <pt x="316" y="704" on="1"/>
        <pt x="430" y="704" on="1"/>
      </contour>
      <contour>
        <pt x="135" y="583" on="1"/>
        <pt x="248" y="583" on="1"/>
        <pt x="248" y="655" on="1"/>
        <pt x="135" y="655" on="1"/>
      </contour>
      <contour>
        <pt x="316" y="583" on="1"/>
        <pt x="430" y="583" on="1"/>
        <pt x="430" y="655" on="1"/>
        <pt x="316" y="655" on="1"/>
      </contour>
      <contour>
        <pt x="135" y="704" on="1"/>
        <pt x="248" y="704" on="1"/>
        <pt x="248" y="776" on="1"/>
        <pt x="135" y="776" on="1"/>
      </contour>
      <instructions>
        <assembly>
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          18
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 39 values pushed */
            55 1 20 5 48 1 28 20 50 47 2 30 28 57 56 2 19 30 60 1 3 19 64 62 2
            1 2 22 21 2 0 1 74 24 2 10 0 8 71
          ELSE[ ]	/* Else */
            MPPEM[ ]	/* MeasurePixelPerEm */
            PUSHB[ ]	/* 1 value pushed */
            30
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              NPUSHB[ ]	/* 42 values pushed */
              55 1 20 5 48 1 28 20 50 47 2 30 28 57 56 2 19 30 60 1 3 19 64 62 2
              1 2 22 21 2 0 1 74 1 25 0 24 1 10 25 9 71
            ELSE[ ]	/* Else */
              MPPEM[ ]	/* MeasurePixelPerEm */
              PUSHB[ ]	/* 1 value pushed */
              34
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                NPUSHB[ ]	/* 42 values pushed */
                55 1 20 27 48 1 28 20 50 47 2 30 28 57 56 2 19 30 60 1 3 19 64 62 2
                1 2 22 21 2 0 1 74 1 25 0 24 1 10 25 9 71
              ELSE[ ]	/* Else */
                NPUSHB[ ]	/* 42 values pushed */
                55 1 20 27 48 1 28 20 50 47 2 30 28 57 56 2 19 30 60 1 3 29 64 62 2
                1 2 22 21 2 0 1 74 1 25 0 24 1 10 25 9 71
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          18
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 106 values pushed */
            6 1 4 3 2 3 4 2 109 0 14 24 13 24 14 13 109 21 1 5 34 27 2 20 28
            5 20 94 33 1 28 32 1 30 19 28 30 94 31 29 22 3 19 35 26 23 7 4 3 4
            19 3 94 8 1 2 9 1 1 0 2 1 94 0 10 24 0 10 84 25 1 0 0 24 14
            0 24 96 15 1 13 16 1 12 11 13 12 94 17 1 11 18 18 11 82 17 1 11 11 18
            87 0 18 11 18 75
          ELSE[ ]	/* Else */
            MPPEM[ ]	/* MeasurePixelPerEm */
            PUSHB[ ]	/* 1 value pushed */
            30
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              NPUSHB[ ]	/* 107 values pushed */
              6 1 4 3 2 3 4 2 109 0 14 24 13 24 14 13 109 21 1 5 34 27 2 20 28
              5 20 94 33 1 28 32 1 30 19 28 30 94 31 29 22 3 19 35 26 23 7 4 3 4
              19 3 94 8 1 2 9 1 1 0 2 1 94 0 0 0 10 24 0 10 96 0 25 0 24
              14 25 24 96 15 1 13 16 1 12 11 13 12 94 17 1 11 18 18 11 82 17 1 11 11
              18 87 0 18 11 18 75
            ELSE[ ]	/* Else */
              MPPEM[ ]	/* MeasurePixelPerEm */
              PUSHB[ ]	/* 1 value pushed */
              34
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                NPUSHB[ ]	/* 112 values pushed */
                6 1 4 3 2 3 4 2 109 0 14 24 13 24 14 13 109 34 1 27 20 5 27 82 21
                1 5 0 20 28 5 20 94 33 1 28 32 1 30 19 28 30 94 31 29 22 3 19 35 26
                23 7 4 3 4 19 3 94 8 1 2 9 1 1 0 2 1 94 0 0 0 10 24 0 10
                96 0 25 0 24 14 25 24 96 15 1 13 16 1 12 11 13 12 94 17 1 11 18 18 11
                82 17 1 11 11 18 87 0 18 11 18 75
              ELSE[ ]	/* Else */
                NPUSHB[ ]	/* 117 values pushed */
                6 1 4 3 2 3 4 2 109 0 14 24 13 24 14 13 109 34 1 27 20 5 27 82 21
                1 5 0 20 28 5 20 94 33 1 28 32 1 30 19 28 30 94 22 1 19 29 3 19 82
                31 1 29 35 26 23 7 4 3 4 29 3 94 8 1 2 9 1 1 0 2 1 94 0 0
                0 10 24 0 10 96 0 25 0 24 14 25 24 96 15 1 13 16 1 12 11 13 12 94 17
                1 11 18 18 11 82 17 1 11 11 18 87 0 18 11 18 75
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 68 values pushed */
          43 43 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 43 79 43 79 77 75 72
          69 67 66 59 58 54 53 52 51 45 44 42 41 40 39 38 37 36 35 34 33 32 31 30 29
          28 27 26 25 20 19 17 17 17 17 17 17 17 17 32 36 5 29
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni590D" xMin="13" yMin="-86" xMax="987" yMax="886">
      <contour>
        <pt x="13" y="606" on="1"/>
        <pt x="152" y="716" on="0"/>
        <pt x="244" y="886" on="1"/>
        <pt x="330" y="886" on="1"/>
        <pt x="307" y="845" on="0"/>
        <pt x="282" y="807" on="1"/>
        <pt x="969" y="807" on="1"/>
        <pt x="969" y="744" on="1"/>
        <pt x="238" y="744" on="1"/>
        <pt x="212" y="708" on="0"/>
        <pt x="184" y="675" on="1"/>
        <pt x="871" y="675" on="1"/>
        <pt x="871" y="315" on="1"/>
        <pt x="803" y="315" on="1"/>
        <pt x="803" y="341" on="1"/>
        <pt x="229" y="341" on="1"/>
        <pt x="229" y="306" on="1"/>
        <pt x="161" y="306" on="1"/>
        <pt x="161" y="648" on="1"/>
        <pt x="112" y="593" on="0"/>
        <pt x="58" y="545" on="1"/>
        <pt x="41" y="573" on="0"/>
      </contour>
      <contour>
        <pt x="13" y="96" on="1"/>
        <pt x="192" y="184" on="0"/>
        <pt x="302" y="317" on="1"/>
        <pt x="389" y="317" on="1"/>
        <pt x="367" y="290" on="0"/>
        <pt x="345" y="265" on="1"/>
        <pt x="873" y="265" on="1"/>
        <pt x="873" y="212" on="1"/>
        <pt x="778" y="127" on="0"/>
        <pt x="631" y="61" on="1"/>
        <pt x="784" y="21" on="0"/>
        <pt x="987" y="6" on="1"/>
        <pt x="961" y="-38" on="0"/>
        <pt x="941" y="-74" on="1"/>
        <pt x="704" y="-41" on="0"/>
        <pt x="534" y="23" on="1"/>
        <pt x="360" y="-38" on="0"/>
        <pt x="113" y="-86" on="1"/>
        <pt x="95" y="-54" on="0"/>
        <pt x="68" y="-20" on="1"/>
        <pt x="311" y="20" on="0"/>
        <pt x="446" y="60" on="1"/>
        <pt x="336" y="112" on="0"/>
        <pt x="262" y="181" on="1"/>
        <pt x="169" y="98" on="0"/>
        <pt x="61" y="42" on="1"/>
        <pt x="39" y="70" on="0"/>
      </contour>
      <contour>
        <pt x="229" y="401" on="1"/>
        <pt x="803" y="401" on="1"/>
        <pt x="803" y="479" on="1"/>
        <pt x="229" y="479" on="1"/>
      </contour>
      <contour>
        <pt x="803" y="614" on="1"/>
        <pt x="229" y="614" on="1"/>
        <pt x="229" y="537" on="1"/>
        <pt x="803" y="537" on="1"/>
      </contour>
      <contour>
        <pt x="761" y="208" on="1"/>
        <pt x="316" y="208" on="1"/>
        <pt x="402" y="137" on="0"/>
        <pt x="536" y="90" on="1"/>
        <pt x="671" y="143" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 27 values pushed */
          18 1 11 3 20 1 12 11 29 1 13 8 3 71 60 47 45 43 41 39 37 35 33 31 10
          13 68
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          24
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 60 values pushed */
            0 7 5 4 8 7 101 6 1 4 8 5 4 8 107 0 1 0 2 3 1 2 95 0 3
            0 11 12 3 11 94 0 12 0 10 9 12 10 94 0 9 0 5 7 9 5 94 0 8 0
            13 8 13 91 0 0 0 12 0 73
          ELSE[ ]	/* Else */
            MPPEM[ ]	/* MeasurePixelPerEm */
            PUSHB[ ]	/* 1 value pushed */
            27
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              NPUSHB[ ]	/* 61 values pushed */
              0 7 5 4 5 7 4 109 6 1 4 8 5 4 8 107 0 1 0 2 3 1 2 95 0
              3 0 11 12 3 11 94 0 12 0 10 9 12 10 94 0 9 0 5 7 9 5 94 0 8
              0 13 8 13 91 0 0 0 12 0 73
            ELSE[ ]	/* Else */
              NPUSHB[ ]	/* 67 values pushed */
              0 7 5 4 5 7 4 109 0 4 6 5 4 6 107 0 6 8 5 6 8 107 0 1 0
              2 3 1 2 95 0 3 0 11 12 3 11 94 0 12 0 10 9 12 10 94 0 9 0 5
              7 9 5 94 0 8 0 13 8 13 91 0 0 0 12 0 73
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 22 values pushed */
          58 57 56 55 54 53 52 51 50 49 18 23 17 17 17 18 17 18 18 14 5 29
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni5BA4" xMin="21" yMin="-40" xMax="981" yMax="892">
      <contour>
        <pt x="21" y="27" on="1"/>
        <pt x="461" y="27" on="1"/>
        <pt x="461" y="142" on="1"/>
        <pt x="110" y="142" on="1"/>
        <pt x="110" y="209" on="1"/>
        <pt x="461" y="209" on="1"/>
        <pt x="461" y="322" on="1"/>
        <pt x="262" y="312" on="1"/>
        <pt x="213" y="310" on="0"/>
        <pt x="164" y="300" on="1"/>
        <pt x="131" y="381" on="1"/>
        <pt x="168" y="395" on="0"/>
        <pt x="210" y="423" on="1"/>
        <pt x="279" y="470" on="0"/>
        <pt x="336" y="519" on="1"/>
        <pt x="159" y="519" on="1"/>
        <pt x="159" y="586" on="1"/>
        <pt x="849" y="586" on="1"/>
        <pt x="849" y="519" on="1"/>
        <pt x="451" y="519" on="1"/>
        <pt x="373" y="455" on="0"/>
        <pt x="272" y="384" on="1"/>
        <pt x="483" y="391" on="0"/>
        <pt x="694" y="399" on="1"/>
        <pt x="663" y="428" on="0"/>
        <pt x="629" y="457" on="1"/>
        <pt x="683" y="506" on="1"/>
        <pt x="806" y="409" on="0"/>
        <pt x="897" y="324" on="1"/>
        <pt x="833" y="265" on="1"/>
        <pt x="802" y="297" on="0"/>
        <pt x="767" y="332" on="1"/>
        <pt x="650" y="329" on="0"/>
        <pt x="540" y="325" on="1"/>
        <pt x="540" y="209" on="1"/>
        <pt x="892" y="209" on="1"/>
        <pt x="892" y="142" on="1"/>
        <pt x="540" y="142" on="1"/>
        <pt x="540" y="27" on="1"/>
        <pt x="981" y="27" on="1"/>
        <pt x="981" y="-40" on="1"/>
        <pt x="21" y="-40" on="1"/>
      </contour>
      <contour>
        <pt x="56" y="754" on="1"/>
        <pt x="483" y="754" on="1"/>
        <pt x="456" y="807" on="0"/>
        <pt x="422" y="858" on="1"/>
        <pt x="491" y="892" on="1"/>
        <pt x="527" y="838" on="0"/>
        <pt x="562" y="777" on="1"/>
        <pt x="513" y="754" on="1"/>
        <pt x="948" y="754" on="1"/>
        <pt x="948" y="577" on="1"/>
        <pt x="870" y="577" on="1"/>
        <pt x="870" y="686" on="1"/>
        <pt x="134" y="686" on="1"/>
        <pt x="134" y="577" on="1"/>
        <pt x="56" y="577" on="1"/>
      </contour>
      <instructions>
        <assembly>
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          21
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 23 values pushed */
            26 25 2 7 4 28 10 2 3 7 29 9 2 2 3 3 71 48 46 45 3 13 69
          ELSE[ ]	/* Else */
            NPUSHB[ ]	/* 26 values pushed */
            26 25 2 7 4 10 1 8 7 28 1 3 8 29 9 2 2 3 4 71 48 46 45 3 13
            69
          EIF[ ]	/* EndIf */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          12
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 63 values pushed */
            17 1 15 5 4 16 15 101 14 1 13 0 16 5 13 16 94 0 5 6 1 4 7 5 4
            94 0 7 8 1 3 2 7 3 96 9 1 2 10 1 1 0 2 1 94 11 1 0 12 12
            0 82 11 1 0 0 12 86 0 12 0 12 74
          ELSE[ ]	/* Else */
            MPPEM[ ]	/* MeasurePixelPerEm */
            PUSHB[ ]	/* 1 value pushed */
            21
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              NPUSHB[ ]	/* 64 values pushed */
              17 1 15 5 4 5 15 4 109 14 1 13 0 16 5 13 16 94 0 5 6 1 4 7 5
              4 94 0 7 8 1 3 2 7 3 96 9 1 2 10 1 1 0 2 1 94 11 1 0 12
              12 0 82 11 1 0 0 12 86 0 12 0 12 74
            ELSE[ ]	/* Else */
              NPUSHB[ ]	/* 70 values pushed */
              17 1 15 5 4 5 15 4 109 0 8 7 3 3 8 101 14 1 13 0 16 5 13 16 94
              0 5 6 1 4 7 5 4 94 0 7 0 3 2 7 3 96 9 1 2 10 1 1 0 2
              1 94 11 1 0 12 12 0 82 11 1 0 0 12 86 0 12 0 12 74
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 30 values pushed */
          56 55 54 53 52 51 50 49 43 42 41 40 39 38 37 36 35 34 40 34 17 17 22 33 17
          17 16 18 5 29
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni5C42" xMin="8" yMin="-86" xMax="982" yMax="835">
      <contour>
        <pt x="62" y="-82" on="1"/>
        <pt x="33" y="-44" on="0"/>
        <pt x="8" y="-14" on="1"/>
        <pt x="129" y="156" on="0"/>
        <pt x="129" y="474" on="1"/>
        <pt x="129" y="835" on="1"/>
        <pt x="932" y="835" on="1"/>
        <pt x="932" y="527" on="1"/>
        <pt x="857" y="527" on="1"/>
        <pt x="857" y="563" on="1"/>
        <pt x="203" y="563" on="1"/>
        <pt x="203" y="458" on="1"/>
        <pt x="203" y="128" on="0"/>
      </contour>
      <contour>
        <pt x="671" y="138" on="1"/>
        <pt x="724" y="184" on="1"/>
        <pt x="868" y="59" on="0"/>
        <pt x="953" y="-32" on="1"/>
        <pt x="893" y="-86" on="1"/>
        <pt x="863" y="-52" on="0"/>
        <pt x="833" y="-21" on="1"/>
        <pt x="535" y="-22" on="0"/>
        <pt x="347" y="-36" on="1"/>
        <pt x="319" y="-38" on="0"/>
        <pt x="277" y="-49" on="1"/>
        <pt x="244" y="23" on="1"/>
        <pt x="303" y="46" on="0"/>
        <pt x="335" y="73" on="1"/>
        <pt x="391" y="128" on="0"/>
        <pt x="454" y="212" on="1"/>
        <pt x="215" y="212" on="1"/>
        <pt x="215" y="280" on="1"/>
        <pt x="982" y="280" on="1"/>
        <pt x="982" y="212" on="1"/>
        <pt x="555" y="212" on="1"/>
        <pt x="472" y="111" on="0"/>
        <pt x="401" y="40" on="1"/>
        <pt x="585" y="41" on="0"/>
        <pt x="769" y="45" on="1"/>
        <pt x="721" y="93" on="0"/>
      </contour>
      <contour>
        <pt x="203" y="767" on="1"/>
        <pt x="203" y="632" on="1"/>
        <pt x="857" y="632" on="1"/>
        <pt x="857" y="767" on="1"/>
      </contour>
      <contour>
        <pt x="284" y="457" on="1"/>
        <pt x="896" y="457" on="1"/>
        <pt x="896" y="389" on="1"/>
        <pt x="284" y="389" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 97 values pushed */
          14 1 7 4 24 2 2 3 7 2 71 23 17 16 3 3 68 0 1 2 10 2 1 10 109
          0 0 12 1 9 8 0 9 94 0 8 0 2 1 8 2 94 0 10 0 11 5 10 11 94
          0 5 6 1 4 7 5 4 94 0 7 3 3 7 82 0 7 7 3 88 0 3 7 3 76
          39 39 46 45 44 43 39 42 39 42 19 34 17 17 24 25 17 17 21 13 5 29
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni5C45" xMin="12" yMin="-81" xMax="965" yMax="839">
      <contour>
        <pt x="603" y="556" on="1"/>
        <pt x="603" y="458" on="1"/>
        <pt x="965" y="458" on="1"/>
        <pt x="965" y="390" on="1"/>
        <pt x="603" y="390" on="1"/>
        <pt x="603" y="276" on="1"/>
        <pt x="871" y="276" on="1"/>
        <pt x="871" y="-81" on="1"/>
        <pt x="797" y="-81" on="1"/>
        <pt x="797" y="-30" on="1"/>
        <pt x="340" y="-30" on="1"/>
        <pt x="340" y="-81" on="1"/>
        <pt x="266" y="-81" on="1"/>
        <pt x="266" y="276" on="1"/>
        <pt x="528" y="276" on="1"/>
        <pt x="528" y="390" on="1"/>
        <pt x="197" y="390" on="1"/>
        <pt x="195" y="94" on="0"/>
        <pt x="70" y="-75" on="1"/>
        <pt x="48" y="-47" on="0"/>
        <pt x="12" y="-10" on="1"/>
        <pt x="121" y="145" on="0"/>
        <pt x="121" y="407" on="1"/>
        <pt x="121" y="839" on="1"/>
        <pt x="891" y="839" on="1"/>
        <pt x="891" y="526" on="1"/>
        <pt x="816" y="526" on="1"/>
        <pt x="816" y="575" on="1"/>
        <pt x="197" y="575" on="1"/>
        <pt x="197" y="458" on="1"/>
        <pt x="528" y="458" on="1"/>
        <pt x="528" y="556" on="1"/>
      </contour>
      <contour>
        <pt x="797" y="210" on="1"/>
        <pt x="340" y="210" on="1"/>
        <pt x="340" y="36" on="1"/>
        <pt x="797" y="36" on="1"/>
      </contour>
      <contour>
        <pt x="816" y="770" on="1"/>
        <pt x="197" y="770" on="1"/>
        <pt x="197" y="644" on="1"/>
        <pt x="816" y="644" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 115 values pushed */
          20 1 4 14 18 1 3 4 2 71 17 1 12 10 9 10 12 9 109 0 9 0 10 9 0
          107 5 1 3 4 3 112 0 8 0 15 16 8 15 94 0 16 0 10 12 16 10 94 11 1
          0 7 1 1 2 0 1 94 6 1 2 0 13 14 2 13 95 0 14 4 4 14 82 0 14
          14 4 86 0 4 14 4 74 0 0 39 38 37 36 35 34 33 32 0 31 0 31 30 29 28
          27 26 25 23 17 17 17 17 17 17 17 17 18 5 29
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni5F0F" xMin="15" yMin="-80" xMax="985" yMax="886">
      <contour>
        <pt x="15" y="694" on="1"/>
        <pt x="558" y="694" on="1"/>
        <pt x="554" y="785" on="0"/>
        <pt x="552" y="886" on="1"/>
        <pt x="635" y="886" on="1"/>
        <pt x="634" y="789" on="0"/>
        <pt x="638" y="694" on="1"/>
        <pt x="974" y="694" on="1"/>
        <pt x="974" y="621" on="1"/>
        <pt x="641" y="621" on="1"/>
        <pt x="660" y="129" on="0"/>
        <pt x="806" y="23" on="1"/>
        <pt x="858" y="-20" on="0"/>
        <pt x="880" y="47" on="1"/>
        <pt x="895" y="98" on="0"/>
        <pt x="906" y="197" on="1"/>
        <pt x="952" y="181" on="0"/>
        <pt x="985" y="172" on="1"/>
        <pt x="967" y="58" on="0"/>
        <pt x="945" y="-13" on="1"/>
        <pt x="922" y="-80" on="0"/>
        <pt x="788" y="-80" on="0"/>
        <pt x="722" y="-12" on="1"/>
        <pt x="582" y="137" on="0"/>
        <pt x="562" y="621" on="1"/>
        <pt x="15" y="621" on="1"/>
      </contour>
      <contour>
        <pt x="19" y="75" on="1"/>
        <pt x="129" y="88" on="0"/>
        <pt x="245" y="104" on="1"/>
        <pt x="245" y="378" on="1"/>
        <pt x="55" y="378" on="1"/>
        <pt x="55" y="451" on="1"/>
        <pt x="514" y="451" on="1"/>
        <pt x="514" y="378" on="1"/>
        <pt x="325" y="378" on="1"/>
        <pt x="325" y="115" on="1"/>
        <pt x="439" y="131" on="0"/>
        <pt x="559" y="149" on="1"/>
        <pt x="557" y="111" on="0"/>
        <pt x="557" y="70" on="1"/>
        <pt x="263" y="28" on="0"/>
        <pt x="38" y="-7" on="1"/>
      </contour>
      <contour>
        <pt x="710" y="828" on="1"/>
        <pt x="757" y="878" on="1"/>
        <pt x="827" y="827" on="0"/>
        <pt x="899" y="763" on="1"/>
        <pt x="844" y="705" on="1"/>
        <pt x="781" y="769" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 60 values pushed */
          46 45 43 3 0 1 41 39 37 35 28 17 15 7 4 6 2 71 0 4 6 4 112 2 1
          0 5 1 3 7 0 3 95 0 7 8 1 6 4 7 6 94 0 1 1 12 1 73 17 17
          20 19 27 17 18 18 16 9 5 29
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni8DC3" xMin="13" yMin="-86" xMax="987" yMax="836">
      <contour>
        <pt x="13" y="83" on="1"/>
        <pt x="39" y="87" on="0"/>
        <pt x="65" y="91" on="1"/>
        <pt x="65" y="436" on="1"/>
        <pt x="133" y="436" on="1"/>
        <pt x="133" y="103" on="1"/>
        <pt x="231" y="120" on="1"/>
        <pt x="231" y="537" on="1"/>
        <pt x="152" y="537" on="1"/>
        <pt x="152" y="505" on="1"/>
        <pt x="84" y="505" on="1"/>
        <pt x="84" y="828" on="1"/>
        <pt x="404" y="828" on="1"/>
        <pt x="404" y="537" on="1"/>
        <pt x="300" y="537" on="1"/>
        <pt x="300" y="374" on="1"/>
        <pt x="428" y="374" on="1"/>
        <pt x="428" y="308" on="1"/>
        <pt x="300" y="308" on="1"/>
        <pt x="300" y="132" on="1"/>
        <pt x="438" y="158" on="1"/>
        <pt x="440" y="86" on="1"/>
        <pt x="217" y="45" on="0"/>
        <pt x="31" y="5" on="1"/>
      </contour>
      <contour>
        <pt x="406" y="495" on="1"/>
        <pt x="642" y="495" on="1"/>
        <pt x="650" y="592" on="0"/>
        <pt x="651" y="742" on="1"/>
        <pt x="553" y="735" on="0"/>
        <pt x="456" y="729" on="1"/>
        <pt x="450" y="763" on="0"/>
        <pt x="441" y="800" on="1"/>
        <pt x="740" y="814" on="0"/>
        <pt x="934" y="836" on="1"/>
        <pt x="948" y="765" on="1"/>
        <pt x="837" y="755" on="0"/>
        <pt x="728" y="748" on="1"/>
        <pt x="726" y="605" on="0"/>
        <pt x="720" y="495" on="1"/>
        <pt x="979" y="495" on="1"/>
        <pt x="979" y="421" on="1"/>
        <pt x="723" y="421" on="1"/>
        <pt x="771" y="131" on="0"/>
        <pt x="987" y="1" on="1"/>
        <pt x="954" y="-36" on="0"/>
        <pt x="926" y="-73" on="1"/>
        <pt x="738" y="75" on="0"/>
        <pt x="681" y="324" on="1"/>
        <pt x="620" y="63" on="0"/>
        <pt x="413" y="-86" on="1"/>
        <pt x="389" y="-57" on="0"/>
        <pt x="356" y="-27" on="1"/>
        <pt x="594" y="136" on="0"/>
        <pt x="634" y="421" on="1"/>
        <pt x="406" y="421" on="1"/>
      </contour>
      <contour>
        <pt x="336" y="603" on="1"/>
        <pt x="336" y="762" on="1"/>
        <pt x="152" y="762" on="1"/>
        <pt x="152" y="603" on="1"/>
      </contour>
      <instructions>
        <assembly>
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          22
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 32 values pushed */
            34 1 10 9 27 1 8 10 47 1 6 5 3 71 33 1 3 69 51 49 45 43 23 21 20
            19 6 5 2 11 6 68
          ELSE[ ]	/* Else */
            NPUSHB[ ]	/* 32 values pushed */
            34 1 14 9 27 1 8 10 47 1 6 5 3 71 33 1 3 69 51 49 45 43 23 21 20
            19 6 5 2 11 6 68
          EIF[ ]	/* EndIf */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          22
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHB[ ]	/* 69 values pushed */
            0 2 1 7 1 2 7 109 0 0 7 12 7 0 12 109 0 3 14 1 10 8 3 10 96
            0 9 0 8 15 9 8 96 16 1 15 4 1 1 2 15 1 94 11 1 7 13 1 12 5
            7 12 94 0 5 6 6 5 82 0 5 5 6 86 0 6 5 6 74
          ELSE[ ]	/* Else */
            NPUSHB[ ]	/* 75 values pushed */
            0 10 14 8 8 10 101 0 2 1 7 1 2 7 109 0 0 7 12 7 0 12 109 0 3
            0 14 10 3 14 94 0 9 0 8 15 9 8 96 16 1 15 4 1 1 2 15 1 94 11
            1 7 13 1 12 5 7 12 94 0 5 6 6 5 82 0 5 5 6 86 0 6 5 6 74
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 30 values pushed */
          55 55 55 58 55 58 57 56 54 53 41 40 39 38 36 35 32 31 19 22 17 17 17 17 17
          19 19 17 5 29
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="zero" xMin="44" yMin="38" xMax="544" yMax="820">
      <contour>
        <pt x="44" y="414" on="1"/>
        <pt x="44" y="614" on="0"/>
        <pt x="178" y="820" on="0"/>
        <pt x="303" y="819" on="1"/>
        <pt x="544" y="819" on="0"/>
        <pt x="544" y="432" on="1"/>
        <pt x="544" y="240" on="0"/>
        <pt x="408" y="38" on="0"/>
        <pt x="286" y="38" on="1"/>
        <pt x="171" y="38" on="0"/>
        <pt x="45" y="230" on="0"/>
      </contour>
      <contour>
        <pt x="142" y="418" on="1"/>
        <pt x="142" y="117" on="0"/>
        <pt x="295" y="117" on="1"/>
        <pt x="445" y="117" on="0"/>
        <pt x="445" y="423" on="1"/>
        <pt x="445" y="740" on="0"/>
        <pt x="298" y="740" on="1"/>
        <pt x="142" y="740" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 31 values pushed */
          0 0 0 3 2 0 3 96 0 2 1 1 2 84 0 2 2 1 88 0 1 2 1 76 34
          35 35 34 4 5 24
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="0" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Copyright (C) 2019 by original authors @ fontello.com
    </namerecord>
    <namerecord nameID="1" platformID="1" platEncID="0" langID="0x0" unicode="True">
      myfont
    </namerecord>
    <namerecord nameID="2" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="1" platEncID="0" langID="0x0" unicode="True">
      myfont
    </namerecord>
    <namerecord nameID="4" platformID="1" platEncID="0" langID="0x0" unicode="True">
      myfont
    </namerecord>
    <namerecord nameID="5" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Version 1.0
    </namerecord>
    <namerecord nameID="6" platformID="1" platEncID="0" langID="0x0" unicode="True">
      myfont
    </namerecord>
    <namerecord nameID="10" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Generated by svg2ttf from Fontello project.
    </namerecord>
    <namerecord nameID="11" platformID="1" platEncID="0" langID="0x0" unicode="True">
      http://fontello.com
    </namerecord>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Copyright (C) 2019 by original authors @ fontello.com
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      myfont
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      myfont
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      myfont
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 1.0
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      myfont
    </namerecord>
    <namerecord nameID="10" platformID="3" platEncID="1" langID="0x409">
      Generated by svg2ttf from Fontello project.
    </namerecord>
    <namerecord nameID="11" platformID="3" platEncID="1" langID="0x409">
      http://fontello.com
    </namerecord>
  </name>

  <post>
    <formatType value="2.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="10"/>
    <underlineThickness value="0"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
    <psNames>
      <!-- This file uses unique glyph names based on the information
           found in the 'post' table. Since these names might not be unique,
           we have to invent artificial names in case of clashes. In order to
           be able to retain the original information, we need a name to
           ps name mapping for those cases where they differ. That's what
           you see below.
            -->
    </psNames>
    <extraNames>
      <!-- following are the name that are not taken from the standard Mac glyph order -->
      <psName name="uni4E09"/>
      <psName name="uni4E8C"/>
      <psName name="uni4E00"/>
      <psName name="uni4E94"/>
      <psName name="uni516D"/>
      <psName name="uni5F0F"/>
      <psName name="uni5885"/>
      <psName name="uni590D"/>
      <psName name="uni5BA4"/>
      <psName name="uni5C42"/>
      <psName name="uni4E03"/>
      <psName name="uni5C45"/>
      <psName name="uni522B"/>
      <psName name="uni8DC3"/>
      <psName name="uni56DB"/>
    </extraNames>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="15"/>
  </gasp>

  <FFTM>
    <!-- FontForge's timestamp, font source creation and modification dates -->
    <version value="1"/>
    <FFTimeStamp value="Mon Jul 31 00:15:04 2017"/>
    <sourceCreated value="Tue Jul 23 03:17:23 2019"/>
    <sourceModified value="Tue Jul 23 03:17:23 2019"/>
  </FFTM>

  <GDEF>
    <Version value="0x00010000"/>
    <GlyphClassDef>
      <ClassDef glyph=".null" class="1"/>
      <ClassDef glyph="eight" class="1"/>
      <ClassDef glyph="five" class="1"/>
      <ClassDef glyph="four" class="1"/>
      <ClassDef glyph="nine" class="1"/>
      <ClassDef glyph="nonmarkingreturn" class="1"/>
      <ClassDef glyph="one" class="1"/>
      <ClassDef glyph="seven" class="1"/>
      <ClassDef glyph="six" class="1"/>
      <ClassDef glyph="three" class="1"/>
      <ClassDef glyph="two" class="1"/>
      <ClassDef glyph="uni4E00" class="1"/>
      <ClassDef glyph="uni4E03" class="1"/>
      <ClassDef glyph="uni4E09" class="1"/>
      <ClassDef glyph="uni4E8C" class="1"/>
      <ClassDef glyph="uni4E94" class="1"/>
      <ClassDef glyph="uni516D" class="1"/>
      <ClassDef glyph="uni522B" class="1"/>
      <ClassDef glyph="uni56DB" class="1"/>
      <ClassDef glyph="uni5885" class="1"/>
      <ClassDef glyph="uni590D" class="1"/>
      <ClassDef glyph="uni5BA4" class="1"/>
      <ClassDef glyph="uni5C42" class="1"/>
      <ClassDef glyph="uni5C45" class="1"/>
      <ClassDef glyph="uni5F0F" class="1"/>
      <ClassDef glyph="uni8DC3" class="1"/>
      <ClassDef glyph="zero" class="1"/>
    </GlyphClassDef>
    <LigCaretList>
      <Coverage>
      </Coverage>
      <!-- LigGlyphCount=0 -->
    </LigCaretList>
  </GDEF>

</ttFont>
